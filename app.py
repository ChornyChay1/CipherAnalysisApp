import os
import time
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from cipher import (
    CaesarCipher, CaesarCipherMod,
    DESCipher, DESCipherMod,
    RSACipher, RSACipherMod,
    CaesarBruteForce,CaesarCipherModBruteForce,
   
)
import sys
import psutil   
from functools import wraps

RUSSIAN_KEYWORDS = [
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–∫–∞–∫", "–¥–µ–ª–∞", "—à–∏—Ñ—Ä", "—Ä–∞–±–æ—Ç–∞", "–ø—Ä–∏–º–µ—Ä", "—Å–ª–æ–≤–æ"
]

# –û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
ALGO_DESCRIPTIONS = {
    "–¶–µ–∑–∞—Ä—å": "–ü—Ä–æ—Å—Ç–æ–π —à–∏—Ñ—Ä —Å–¥–≤–∏–≥–∞, –≥–¥–µ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ.",
    "–¶–µ–∑–∞—Ä—å (–º–æ–¥)": "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–¥–≤–∏–≥–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.",
    "DES": "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π DES-–ø–æ–¥–æ–±–Ω—ã–π —à–∏—Ñ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π XOR —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º.",
    "DES (–º–æ–¥)": "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DES —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º —Å–¥–≤–∏–≥–æ–º –∫–ª—é—á–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏.",
    "RSA": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RSA —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏).",
    "RSA (–º–æ–¥)": "RSA —Å –¥–≤–æ–π–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã."
}

# –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
ALGO_PARAMS = {
    "–¶–µ–∑–∞—Ä—å": {"shift": (int, "–°–¥–≤–∏–≥", 3)},
    "–¶–µ–∑–∞—Ä—å (–º–æ–¥)": {"key": (str, "–ö–ª—é—á (–ª–∞—Ç–∏–Ω–∏—Ü–∞)", "key")},
    "DES": {"key": (str, "–ö–ª—é—á (8 –±–∞–π—Ç, hex)", "38627974656b6579")},  # —ç—Ç–æ "8bytekey"
    "DES (–º–æ–¥)": {"key": (str, "–ö–ª—é—á (8 –±–∞–π—Ç, hex)", "38627974656b6579")},
    "RSA": {},
    "RSA (–º–æ–¥)": {},
}


 






class CipherApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–®–∏—Ñ—Ä–∞—Ç–æ—Ä")
        self.root.geometry("900x700")
        self.prev_analysis_text = ""
        self.algorithms = {
            "–¶–µ–∑–∞—Ä—å": CaesarCipher,
            "–¶–µ–∑–∞—Ä—å (–º–æ–¥)": CaesarCipherMod,
            "DES": DESCipher,
            "DES (–º–æ–¥)": DESCipherMod,
            "RSA": RSACipher,
            "RSA (–º–æ–¥)": RSACipherMod,
        }

        self.bruteforcers = {
            "–¶–µ–∑–∞—Ä—å": CaesarBruteForce(),
            "–¶–µ–∑–∞—Ä—å (–º–æ–¥)": CaesarCipherModBruteForce()
        }

        self.param_vars = {}
        self.setup_menu()
        self.setup_ui()
        self.update_params_ui()

    def setup_menu(self):
        menu_bar = tk.Menu(self.root)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", command=self.load_from_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", command=self.save_to_file)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menu_bar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        help_menu = tk.Menu(menu_bar, tearoff=0)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=lambda: messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–®–∏—Ñ—Ä–∞—Ç–æ—Ä 3000 v5.0"))
        menu_bar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)

        self.root.config(menu=menu_bar)

    def setup_ui(self):
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ê–ª–≥–æ—Ä–∏—Ç–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        algo_frame = ttk.Frame(main_frame)
        algo_frame.grid(row=0, column=0, columnspan=2, sticky="ew")
        
        ttk.Label(algo_frame, text="–ê–ª–≥–æ—Ä–∏—Ç–º:").grid(row=0, column=0, sticky="w")
        self.algo_var = tk.StringVar(value="–¶–µ–∑–∞—Ä—å")
        algo_box = ttk.Combobox(algo_frame, textvariable=self.algo_var, 
                               values=list(self.algorithms.keys()), state="readonly")
        algo_box.grid(row=0, column=1, sticky="ew", pady=5)
        algo_box.bind("<<ComboboxSelected>>", lambda e: self.update_params_ui())
        
        self.algo_desc_label = ttk.Label(algo_frame, text=ALGO_DESCRIPTIONS["–¶–µ–∑–∞—Ä—å"], 
                                       wraplength=600, foreground="gray")
        self.algo_desc_label.grid(row=1, column=0, columnspan=2, sticky="w", pady=5)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–∞
        self.params_frame = ttk.Frame(main_frame)
        self.params_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5)

        # –í–∫–ª–∞–¥–∫–∏ –≤–≤–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        notebook = ttk.Notebook(main_frame)
        self.text_input = tk.Text(notebook, wrap="word", undo=True)
        self.result_output = tk.Text(notebook, wrap="word", state="disabled")
        notebook.add(self.text_input, text="–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ / –±–∞–π—Ç–æ–≤")
        notebook.add(self.result_output, text="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        notebook.grid(row=2, column=0, columnspan=2, sticky="nsew", pady=5)

        # –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_frame = ttk.Frame(main_frame)
        copy_frame.grid(row=3, column=0, columnspan=2, sticky="e")
        ttk.Button(copy_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥", command=self.copy_input).grid(row=0, column=0, padx=5)
        ttk.Button(copy_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", command=self.copy_result).grid(row=0, column=1, padx=5)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=4, column=0, columnspan=2, pady=10)
        ttk.Button(btn_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.encrypt).grid(row=0, column=0, padx=5)
        ttk.Button(btn_frame, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", command=self.decrypt).grid(row=0, column=1, padx=5)
        ttk.Button(btn_frame, text="Brute-Force", command=self.brute_force).grid(row=0, column=2, padx=5)
        ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", command=self.clear_all).grid(row=0, column=3, padx=5)

        # –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_label = ttk.Label(main_frame, text="–ê–Ω–∞–ª–∏–∑: ‚Äî")
        self.analysis_label.grid(row=5, column=0, columnspan=2, sticky="w", pady=5)

        self.prev_analysis_label = ttk.Label(main_frame, text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑: ‚Äî", foreground="gray")
        self.prev_analysis_label.grid(row=6, column=0, columnspan=2, sticky="w", pady=5)

        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)

    def update_params_ui(self):
        # –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for widget in self.params_frame.winfo_children():
            widget.destroy()
        self.param_vars.clear()

        algo = self.algo_var.get()
        self.algo_desc_label.config(text=ALGO_DESCRIPTIONS.get(algo, ""))
        params = ALGO_PARAMS.get(algo, {})

        if not params:
            ttk.Label(self.params_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è").pack(anchor="w")
            return

        for i, (param_name, (ptype, desc, default)) in enumerate(params.items()):
            ttk.Label(self.params_frame, text=f"{desc}:").grid(row=i, column=0, sticky="w")
            if ptype == int:
                var = tk.IntVar(value=default)
                entry = ttk.Entry(self.params_frame, textvariable=var)
            elif ptype == str:
                var = tk.StringVar(value=default)
                entry = ttk.Entry(self.params_frame, textvariable=var)
            else:
                var = tk.StringVar(value=str(default))
                entry = ttk.Entry(self.params_frame, textvariable=var)
            entry.grid(row=i, column=1, sticky="ew", padx=5, pady=2)
            self.param_vars[param_name] = var

        self.params_frame.columnconfigure(1, weight=1)

    def get_cipher(self):
        algo_name = self.algo_var.get()
        cls = self.algorithms.get(algo_name)
        if cls is None:
            return None

        params = ALGO_PARAMS.get(algo_name, {})

        kwargs = {}
        for param_name, (ptype, desc, default) in params.items():
            var = self.param_vars.get(param_name)
            if var is not None:
                val = var.get()
                if ptype == int:
                    try:
                        val = int(val)
                    except ValueError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{desc}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                        return None
                elif ptype == str:
                    val = str(val)
                    if "hex" in desc.lower():
                        try:
                            val = bytes.fromhex(val)
                        except ValueError:
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{desc}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ.")
                            return None
                kwargs[param_name] = val

        try:
            return cls(**kwargs)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∏—Ñ—Ä:\n{e}")
            return None

    def measure_analysis(self, text, action, cipher):
        self.prev_analysis_text = self.analysis_label.cget("text")

        process = psutil.Process()
        start_mem = process.memory_info().rss
        start_time = time.time()
        
        try:
            result = action(text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏:\n{e}")
            return ""
            
        end_time = time.time()
        end_mem = process.memory_info().rss

        info = (
            f"–ê–Ω–∞–ª–∏–∑:\n"
            f"  –ê–ª–≥–æ—Ä–∏—Ç–º: {cipher.__class__.__name__}\n"
            f"  –°–∏–º–≤–æ–ª–æ–≤: {len(text)}\n"
            f"  –ü–∞–º—è—Ç—å: ~{end_mem - start_mem} –±–∞–π—Ç\n"
            f"  –í—Ä–µ–º—è: {end_time - start_time:.5f} —Å–µ–∫"
        )
        self.analysis_label.config(text=info)
        self.prev_analysis_label.config(text=f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑:\n{self.prev_analysis_text}")
        return result

    def brute_force(self):
        text = self.text_input.get("1.0", tk.END).strip()
        if not text:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∑–ª–æ–º–∞")
            return

        algo = self.algo_var.get()
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ brute force –¥–ª—è —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        if algo not in ["–¶–µ–∑–∞—Ä—å", "–¶–µ–∑–∞—Ä—å (–º–æ–¥)"]:
            messagebox.showwarning(
                "–°—Ç–æ–π–∫–∏–π —à–∏—Ñ—Ä", 
                f"Brute-force –¥–ª—è {algo} –∑–∞–π–º–µ—Ç –Ω–µ–ø—Ä–∞–∫—Ç–∏—á–Ω–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≥–æ–¥—ã –∏–ª–∏ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è).\n"
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞."
            )
            return

        bruteforcer = self.bruteforcers.get(algo)
        if bruteforcer is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"Brute-Force –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ '{algo}'")
            return

        try:
            dict_res = bruteforcer.crack(text)
            results = dict_res["results"] 
            metrics = dict_res["metrics"] 
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: {str(e)}")
            return
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ:\n{str(e)}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–ª–æ–º–∞ ({algo}):",
            f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics['time']:.2f} —Å–µ–∫", 
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {metrics['memory']} –±–∞–π—Ç",
            ""
        ]

        self.analysis_label.config(
            text=f"–ê–Ω–∞–ª–∏–∑ –≤–∑–ª–æ–º–∞ ({algo}):\n" 
                 f"–í—Ä–µ–º—è: {metrics['time']:.2f} —Å–µ–∫\n" 
                 f"–ü–∞–º—è—Ç—å: {metrics['memory']} –±–∞–π—Ç"
        )
    
        self.show_result("\n".join(report))

    def encrypt(self):
        text = self.text_input.get("1.0", tk.END).strip()
        cipher = self.get_cipher()
        if cipher:
            result = self.measure_analysis(text, cipher.encrypt, cipher)
            self.show_result(result)

    def decrypt(self):
        text = self.text_input.get("1.0", tk.END).strip()
        cipher = self.get_cipher()
        if cipher:
            result = self.measure_analysis(text, cipher.decrypt, cipher)
            self.show_result(result)

    def show_result(self, text):
        self.result_output.config(state="normal")
        self.result_output.delete("1.0", tk.END)
        self.result_output.insert("1.0", text)
        self.result_output.config(state="disabled")

    def save_to_file(self):
        text = self.result_output.get("1.0", tk.END).strip()
        if not text:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã", "*.bin"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if not file_path:
            return

        try:
            if file_path.endswith(".bin"):
                with open(file_path, "wb") as f:
                    f.write(text.encode("latin1"))
            else:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(text)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def load_from_file(self):
        file_path = filedialog.askopenfilename()
        if not file_path:
            return

        try:
            with open(file_path, "rb") as f:
                data = f.read()
            content = data.decode("latin1")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
            return

        self.text_input.delete("1.0", tk.END)
        self.text_input.insert("1.0", content)

    def clear_all(self):
        self.text_input.delete("1.0", tk.END)
        self.result_output.config(state="normal")
        self.result_output.delete("1.0", tk.END)
        self.result_output.config(state="disabled")
        self.analysis_label.config(text="–ê–Ω–∞–ª–∏–∑: ‚Äî")
        self.prev_analysis_label.config(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑: ‚Äî")

    def copy_input(self):
        text = self.text_input.get("1.0", tk.END).strip()
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")

    def copy_result(self):
        text = self.result_output.get("1.0", tk.END).strip()
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")


if __name__ == "__main__":
    root = tk.Tk()
    app = CipherApp(root)
    root.mainloop()